{"version":3,"file":"index.cjs.development.cjs","sources":["../src/util/rand.ts","../src/util/splitChunk.ts","../src/method/splitThenMerge.ts","../src/util/filterLands.ts","../src/util/groupByName.ts","../src/util/distributeGroup.ts","../src/method/distributeCards.ts","../src/util/findIndexOfLands.ts","../src/method/ensureLands.ts","../src/library.ts"],"sourcesContent":["import { IOptionsDeckLibraryWithShuffle } from '../types';\nimport { IRNGLike } from '@lazy-random/rng-abstract';\nimport { simpleWrap } from '@lazy-random/simple-wrap';\nimport { _MathRandom } from '@lazy-random/original-math-random';\nimport { dfArrayShuffle } from '@lazy-random/df-array';\n\nlet _cacheRNG: IRNGLike;\n\nexport function defaultRNG()\n{\n\treturn _cacheRNG ??= simpleWrap(_MathRandom)\n}\n\nexport function getRandomFromOptions(options?: IOptionsDeckLibraryWithShuffle): IRNGLike\n{\n\tconst random = (options?.random ?? defaultRNG());\n\n\treturn random as any\n}\n\nexport function rngArrayShuffle<T>(random: IRNGLike, arr: T[], overwrite?: boolean)\n{\n\treturn dfArrayShuffle(random, arr, overwrite)();\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { arrayChunkSplit } from 'array-chunk-split';\n\nexport function splitChunk<T = ICardWithoutAmount>(cards: T[], maxChunkLength?: number)\n{\n\treturn arrayChunkSplit(cards, maxChunkLength ?? 12)\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { splitChunk } from '../util/splitChunk';\nimport { getRandomFromOptions, rngArrayShuffle } from '../util/rand';\nimport { IOptionsDeckLibraryWithShuffle } from '../types';\nimport { DeckLibraryWithShuffle } from '../library';\n\n/**\n * split cards chunk and merge by random oder\n */\nexport function splitThenMerge<T = ICardWithoutAmount>(cards: T[],\n\toptions?: IOptionsDeckLibraryWithShuffle,\n\tself?: DeckLibraryWithShuffle,\n): T[]\n{\n\tlet arr = splitChunk(cards, options?.maxChunkLength)\n\n\treturn rngArrayShuffle(getRandomFromOptions(options), arr, true).flat()\n}\n\nexport default splitThenMerge\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { parseSnowCoveredOrBaseLand } from 'mtg-base-land';\n\nexport function filterLands<T extends ICardWithoutAmount = ICardWithoutAmount>(cards: T[])\n{\n\treturn cards.reduce((data, card) =>\n\t{\n\n\t\tlet info = parseSnowCoveredOrBaseLand(card.name);\n\n\t\tif (!info)\n\t\t{\n\t\t\tdata.others.push(card);\n\t\t}\n\t\telse if (info?.snow)\n\t\t{\n\t\t\tdata.snowLands.push(card);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdata.baseLands.push(card);\n\t\t}\n\n\t\treturn data\n\t}, {\n\t\tbaseLands: [] as T[],\n\t\tsnowLands: [] as T[],\n\t\tothers: [] as T[],\n\t})\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { arrayGroupToRecord } from 'array-group-to-record';\n\nexport function groupByName<T extends ICardWithoutAmount = ICardWithoutAmount>(cards: T[])\n{\n\treturn arrayGroupToRecord(cards, {\n\t\tgetKey(item: T, index: number, arr: T[]): string {\n\t\t\treturn item.name\n\t\t},\n\t})\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { distributeGroupToArray } from 'distribute-group-to-array';\n\nexport function distributeGroup<T extends ICardWithoutAmount = ICardWithoutAmount>(group: Record<string, T[]>)\n{\n\treturn distributeGroupToArray(group, {\n\t\tgroupArraySize: 4,\n\t})\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { IOptionsDeckLibraryWithShuffle } from '../types';\nimport { filterLands } from '../util/filterLands';\nimport { groupByName } from '../util/groupByName';\nimport { distributeGroup } from '../util/distributeGroup';\nimport { createGroupArray } from '../util/createGroupArray';\nimport { DeckLibraryWithShuffle } from '../library';\n\n/**\n * do distribute before shuffle\n *\n * - distribute lands\n * - distribute cards and insert lands every 4 cards\n */\nexport function distributeCards<T extends ICardWithoutAmount = ICardWithoutAmount>(cards: T[],\n\toptions?: IOptionsDeckLibraryWithShuffle,\n\tself?: DeckLibraryWithShuffle,\n): T[]\n{\n\tlet data = filterLands(cards);\n\n\tlet arr = createGroupArray<T>(4);\n\n\tlet idx = 0;\n\n\tdata.baseLands = distributeGroup(groupByName(data.baseLands));\n\tdata.snowLands = distributeGroup(groupByName(data.snowLands));\n\n\twhile (data.baseLands.length || data.snowLands.length || data.others.length)\n\t{\n\n\t\tfor (let i = 0; i < 4; i++)\n\t\t{\n\t\t\tlet card = data.others.pop();\n\t\t\tarr[i].push(card);\n\n\t\t\tif (!card || (idx % 4) === 0)\n\t\t\t{\n\t\t\t\tarr[i].push(data.baseLands.pop() ?? data.snowLands.pop());\n\t\t\t\tarr[i].push(data.baseLands.pop() ?? data.snowLands.pop());\n\t\t\t}\n\t\t}\n\n\t\tidx++;\n\n\t}\n\n\treturn arr.flat().filter(c => c)\n}\n\nexport default distributeCards\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { parseSnowCoveredOrBaseLand } from 'mtg-base-land';\n\nexport function findIndexOfLands<T extends ICardWithoutAmount = ICardWithoutAmount>(cards: T[], startIndex?: number)\n{\n\tstartIndex |= 0;\n\n\treturn cards.reduce((list, card, idx) =>\n\t{\n\n\t\tif (idx >= startIndex)\n\t\t{\n\t\t\tlet info = parseSnowCoveredOrBaseLand(card.name);\n\n\t\t\tif (info)\n\t\t\t{\n\t\t\t\tlist.push(idx);\n\t\t\t}\n\t\t}\n\n\t\treturn list\n\t}, [] as number[])\n}\n","import { ICardWithoutAmount } from 'mtg-decklist-parser2';\nimport { IOptionsDeckLibraryWithShuffle } from '../types';\nimport { DeckLibraryWithShuffle } from '../library';\nimport { filterLands } from '../util/filterLands';\nimport { findIndexOfLands } from '../util/findIndexOfLands';\nimport { getRandomFromOptions } from '../util/rand';\nimport { dfArrayUnique } from '@lazy-random/df-array';\n\n/**\n * ensure always has lands when handSize >= 6\n */\nexport function ensureLands<T extends ICardWithoutAmount = ICardWithoutAmount>(cards: T[],\n\toptions: IOptionsDeckLibraryWithShuffle,\n\tself: DeckLibraryWithShuffle,\n): T[]\n{\n\tcards = cards.slice();\n\n\tlet min: number;\n\n\tif (options?.ensureLands === false)\n\t{\n\t\treturn cards\n\t}\n\telse if (options?.ensureLands === true)\n\t{\n\t\tmin = 2;\n\t}\n\telse\n\t{\n\t\tmin = Math.max(Math.min(2, (options?.ensureLands | 0) || 2), 0);\n\t}\n\n\tif (self.handSize < 6 || min <= 0)\n\t{\n\t\treturn cards\n\t}\n\telse if (self.handSize === 6)\n\t{\n\t\tmin = 1;\n\t}\n\n\tconst hands = cards.slice(0, self.handSize);\n\n\tconst data = filterLands(hands);\n\n\tconst lands = data.snowLands.length + data.baseLands.length;\n\n\tconst diff = lands - min;\n\n\tif (diff > 0)\n\t{\n\n\t\tconst idxLandArray = findIndexOfLands(cards, self.handSize);\n\n\t\tconst random = getRandomFromOptions(options);\n\n\t\tconst fnLibraryLand = dfArrayUnique(random, idxLandArray, diff);\n\n\t\tlet fnHandCard = dfArrayUnique(random, data.others, diff);\n\n\t\tfor (let i = 0; i < diff; i++)\n\t\t{\n\t\t\tconst card = fnHandCard();\n\t\t\tconst idxLibraryLand = fnLibraryLand();\n\n\t\t\tconst idxHand = hands.findIndex(value =>\n\t\t\t{\n\t\t\t\treturn value.name === card.name\n\t\t\t});\n\n\t\t\tif (idxHand === -1)\n\t\t\t{\n\t\t\t\tthrow new Error(`Something wrong`)\n\t\t\t}\n\n\t\t\tconst c1 = cards[idxLibraryLand];\n\t\t\tconst c2 = cards[idxHand];\n\n\t\t\tcards[idxLibraryLand] = c2;\n\t\t\thands[idxHand] = cards[idxHand] = c1;\n\t\t}\n\n\t}\n\n\treturn cards\n}\n","import { DeckLibrary, ICardOfLibrary } from 'mtg-decklist-to-library';\nimport { IOptionsDeckLibraryWithShuffle } from './types';\nimport { getRandomFromOptions, rngArrayShuffle } from './util/rand';\nimport { splitThenMerge } from './method/splitThenMerge';\nimport { Decklist } from 'mtg-decklist-parser2';\nimport { distributeCards } from './method/distributeCards';\nimport { ensureLands } from './method/ensureLands';\nimport { int } from '@lazy-random/util-distributions';\n\nexport class DeckLibraryWithShuffle<T = {}> extends DeckLibrary<ICardOfLibrary<T>>\n{\n\n\tpublic _options?: IOptionsDeckLibraryWithShuffle<ICardOfLibrary<T>>;\n\n\tconstructor(deck: Decklist, options?: IOptionsDeckLibraryWithShuffle<ICardOfLibrary<T>>)\n\t{\n\t\tsuper(deck, options);\n\t}\n\n\toptions(options?: IOptionsDeckLibraryWithShuffle): IOptionsDeckLibraryWithShuffle\n\t{\n\t\treturn {\n\t\t\t...this._options,\n\t\t\t...options,\n\t\t}\n\t}\n\n\toverride shuffleStarting()\n\t{\n\t\tlet options = this.options();\n\n\t\tconst random = getRandomFromOptions(options);\n\n\t\toptions.ensureLands ??= int(random, 0, 2);\n\n\t\tlet cards = [\n\t\t\tdistributeCards,\n\t\t\tsplitThenMerge,\n\t\t\tensureLands,\n\t\t].reduce((cards, fn) => fn(cards, options, this), this.cards);\n\n\t\tthis.cards = cards;\n\t\tthis._shuffleStarting = true;\n\t}\n\n\toverride shuffle(isStarting?: boolean)\n\t{\n\t\tlet random = getRandomFromOptions(this.options());\n\n\t\tif (isStarting)\n\t\t{\n\n\t\t}\n\n\t\trngArrayShuffle(random, this.cards, true);\n\t}\n\n}\n"],"names":["_cacheRNG","defaultRNG","simpleWrap","_MathRandom","getRandomFromOptions","options","random","rngArrayShuffle","arr","overwrite","dfArrayShuffle","splitChunk","cards","maxChunkLength","arrayChunkSplit","splitThenMerge","self","flat","filterLands","reduce","data","card","info","parseSnowCoveredOrBaseLand","name","others","push","snow","snowLands","baseLands","groupByName","arrayGroupToRecord","getKey","item","index","distributeGroup","group","distributeGroupToArray","groupArraySize","distributeCards","createGroupArray","idx","length","i","pop","filter","c","findIndexOfLands","startIndex","list","ensureLands","slice","min","Math","max","handSize","hands","lands","diff","idxLandArray","fnLibraryLand","dfArrayUnique","fnHandCard","idxLibraryLand","idxHand","findIndex","value","Error","c1","c2","DeckLibraryWithShuffle","DeckLibrary","constructor","deck","_options","shuffleStarting","int","fn","_shuffleStarting","shuffle","isStarting"],"mappings":"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"}