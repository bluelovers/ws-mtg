"use strict";var e=require("mtg-decklist-to-library"),n=require("random-extra/preset/seedrandom"),t=require("array-chunk-split"),r=require("mtg-base-land");function s(e){var t;return null!==(t=null==e?void 0:e.random)&&void 0!==t?t:n.seedrandom}function a(e,n){let r=function(e,n){return t.arrayChunkSplit(e,null!=n?n:12)}(e,null==n?void 0:n.maxChunkLength);return s(n).arrayShuffle(r,!0).flat()}function o(e){return e.reduce(((e,n)=>{var t,r;return null!==(r=e[t=n.name])&&void 0!==r||(e[t]=[]),e[n.name].push(n),e}),{})}function u(e){const n=[];for(let t=0;t<e;t++)n.push([]);return n}function l(e){let n=u(4);const t=Object.keys(e);let r,s=n.length-1;do{for(let o in t){var a;let u=t[o];r=null===(a=e[u])||void 0===a?void 0:a.pop(),r?(s=++s%n.length,n[s].push(r)):delete e[u]}}while(Object.keys(e).length);return n.flat()}function i(e,n){let t=function(e){return e.reduce(((e,n)=>{let t=r.parseSnowCoveredOrBaseLand(n.name);return t?null!=t&&t.snow?e.snowLands.push(n):e.baseLands.push(n):e.others.push(n),e}),{baseLands:[],snowLands:[],others:[]})}(e),s=u(4),a=0;for(t.baseLands=l(o(t.baseLands)),t.snowLands=l(o(t.snowLands));t.baseLands.length||t.snowLands.length||t.others.length;)for(let e=0;e<4;e++){let n=t.others.pop();var i,d;s[e].push(n),n&&a++%4!=0||(s[e].push(null!==(i=t.baseLands.pop())&&void 0!==i?i:t.snowLands.pop()),s[e].push(null!==(d=t.baseLands.pop())&&void 0!==d?d:t.snowLands.pop()))}return s.flat().filter((e=>e))}class d extends e.DeckLibrary{constructor(e,n){super(e,n)}options(e){return{...this._options,...e}}shuffleStarting(){let e=this.options();this.cards=[i,a].reduce(((n,t)=>t(n,e)),this.cards),this._shuffleStarting=!0}shuffle(e){s(this.options()).arrayShuffle(this.cards,!0)}}exports.DeckLibraryWithShuffle=d,exports.default=d,exports.distributeCards=i,exports.splitThenMerge=a;
//# sourceMappingURL=index.cjs.production.min.js.map
